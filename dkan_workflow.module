<?php
/**
 * @file
 * Code for the NuCivic workflow feature.
 */

include_once 'dkan_workflow.features.inc';

/**
 * Implements hook_menu_alter().
 */
function dkan_workflow_menu_alter(&$items) {
  // Hide the default workbench_content screen because it duplicates
  // functionalities.
  $items['admin/workbench']['page callback'] = 'workbench_create';
  $items['admin/workbench/content']['page callback'] = 'workbench_create';
  unset($items['admin/workbench/create']);
}

/**
 * Implements hook_permission().
 */
function dkan_workflow_permission() {
  return array(
    'access stale reviews page' => array(
      'title' => t('Access Stale Reviews Page'),
      'description' => t('Grant access to stale reviews page.'),
    ),
    'access stale drafts page' => array(
      'title' => t('Access Stale Drafts Page'),
      'description' => t('Grant access to stale drafts page.'),
    ),
  );
}

/**
 * Implements hook_css_alter().
 */
function dkan_workflow_css_alter(&$css) {
  // Do not make assemptions about link_badges module localtion.
  foreach ($css as $css_key => $css_value) {
    if (preg_match('#/link_badges/link_badges.css$#', $css_key)) {
      $css[$css_key]['data'] = drupal_get_path('module', 'dkan_workflow') . '/css/link_badges_custom.css';
      // Only change the first (and most likely unique) occurrence.
      break;
    }
  }
}

/**
 * Implements hook_block_list_alter().
 */
function dkan_workflow_block_info_alter(&$blocks, $theme, $code_blocks) {
  // Disabled workbench default moderation block.
  if ($blocks['workbench']['block']['region'] == 'content') {
    $blocks['workbench']['block']['status'] = 0;
  }
}

/**
 * Implements hook_views_default_views_alter().
 *
 * Load all views from /views folder. Overriding any existing views if any.
 */
function dkan_workflow_views_default_views_alter(&$views) {
  $files = file_scan_directory(drupal_get_path('module', 'dkan_workflow') . '/views', '/.*\.view.inc$/');
  foreach ($files as $filepath => $file) {
    require $filepath;
    if (isset($view)) {
      $views[$view->name] = $view;
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function dkan_workflow_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'views_exposed_form' && strpos($form_state['view']->name, 'workbench_') === 0) {
    dkan_workflow_limit_workflow_exposed_filter_node_types($form);
  }
}

/**
 * Limits exposed form node options to Dataset and Resource.
 */
function dkan_workflow_limit_workflow_exposed_filter_node_types(&$form) {
  $options = $form['type']['#options'];
  $form['type']['#options'] = array_filter($options, function($type) {
    return in_array($type, array('- Any -', 'Dataset', 'Resource'));
  });

  $form['type']['#default_value'] = 'Dataset';
  $form['type']['#validated'] = TRUE;
}
